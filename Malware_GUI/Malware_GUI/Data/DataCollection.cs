

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Windows.Media.Imaging;

namespace Malware_GUI.Data
{
    class DataCollection
    {
        private static readonly List<DataLayout> Virus_List = new List<DataLayout>();
        public string info = ("");

        //function that gets the hash from the search bar and adds it to the text file
        //it can then be picked up by the python script to be returned.
        public int GetHashNum(string value)
        {
            //gets text file from the mainWindow function

            Requesting webRequest = new Requesting();
            string report = webRequest.HashFileReport(value);
            string path = webRequest.WriteJsonToFile(report);
            //returns the count of the list, to see if it is bigger then betfore

            info = parse(report);
            return CreateLayoutElement();
        }

        private string parse(string report)
        {
            string list = "";
            int tracker = 0;
            int trackerCol = 0;
            int skip = 0;
            foreach (var word in report)
            {
                if (skip == 0)
                {
                    if (word == '{')
                        tracker += 1;
                    if (word == '}')
                        tracker -= 1;
                    if (tracker == 1)
                    {
                        skip = 1;
                        tracker = 0;
                    }
                }
                /////////after the big text but before the ","
                if (skip == 1)
                {
                    if (trackerCol == 1)
                    {
                        if (word != ',' || word == ',' && tracker == 1)
                            list += word;

                        if (word == '\"')
                        {//if it is a "
                            if (tracker == 1)
                                tracker = 0;
                            else
                            {
                                tracker = 1;
                            }
                            //if (tracker !=0)// tracker has to be zero, and it is a comma

                        }
                        if (word == ',' && tracker == 0)
                        {
                            trackerCol = 0;
                            list += "~";
                        }
                    }
                    else
                    {
                        if (word == ':')
                            trackerCol = 1;
                    }
                }
            }
            return list;
        }


    //this method, when we figure out parsing, will change
    //createLayoutElement will create a new datalayout, that sends back only the needed data values, 
        //because dataLayout is essentially just a list of "scans" and "attributes" we can shorten those lists
        //to whatever the user wants.  There will need to be some kind of default mode, and something the user
        //can change to display different data.  This will essentially turn into a complex "string.compare" 
        //to construct userLists, and then append it to the mainWindow.  

        //we might want to think about some kind of long term storage solution (DB) for the virus reports, so 
        //if a user pulls in multiple viruses, then changes his global layout settings, we will want to update 
        //the GUI to reflect those changes
    public int CreateLayoutElement(){
        
        //in here, we need to break apart whatever information we are given, 
            //and assign it to values within the datalayout class, then append it to "this.list"
        
            DataLayout temp = new DataLayout();
            string datatemp = info;//the global parsed string here!!!
           
            string[] words = datatemp.Split('~');
            //just for run time cheching nothing of value here
            foreach (string word in words)
            {
                Console.WriteLine(word);
            }

            //these values are "garbage" but from the JSON file
            temp.Name= words[0];
            temp.NumAcc = words[23].Length; //might throw error, because this needs to be an int, and if the string doesn't have an int....
            temp.Des= "Description: " + words[2];  
            temp.solutionToProblem= "Solution: Windows update #"  + words[3];
            temp.Accurance = "Number of accurances: " + temp.NumAcc;
            temp.IMG=this.bitMap(temp.NumAcc);  
            Virus_List.Add(temp);
            Console.WriteLine("new virus added");

            //this should be a value, so we can do error checking, for now just return 1
            return Virus_List.Count();
        }


        //this method might change, to reflect the population of a UserList, that pairs down the VirusList
            //full reports, down to whatever the user wants to see. 
        //calling this will reformat the userList to meet current standings. 
        public void FillList()
        {
            //Data needs to be formated correctly here, then just called in the MainWindow.cs class
            //we can't "add" data in that class (no concatination), hence the adding of things to the front of strings

            //random data for display sakes
            for (int i = 0; i < 7; i++)
            {
                DataLayout temp = new DataLayout();
       
                temp.Name = (i+2).ToString();
                temp.Des = "Description: " + (i * 102);
                temp.NumAcc = (i + 5) * 234;
                temp.Accurance = "Number of accurances: " + temp.NumAcc;
                temp.solutionToProblem = "Solution: Windows update #" + (i + 4) * 1123450;
                temp.IMG = this.bitMap(temp.NumAcc);
                Virus_List.Add(temp);
                Console.WriteLine("Virus {0} created", i.ToString());
            }
        }
        public int SizeOfList()
        {
            return Virus_List.Count();
        }

        //THIS will need some kind of complex parsing, and evaluation, possibly looking through scans for keywords,
            //like "Malware", "worm", "Trojan"....and from the count of those, determining the icon type.  
            //work around for getting different images depending on the virus type
        public BitmapImage bitMap(int n)
        {
            var image = "Assets/malware_Icon.png";
            if (n < 1200)
            {
                image = "Assets/worm_Icon.png";
            }
            else if (n < 1500)
            {
                image = "Assets/trojan_Icon.png";
            }
            else if (n < 2000)
            {
                image = "Assets/spyware_Icon.png";
            }
            else if (n < 3000)
            {
                image = "Assets/adware_Icon.png";
            }
            else image = "Assets/trojan_Icon.png";

            return new BitmapImage(new Uri($"pack://application:,,,/{image}"));
        }

        //CRUD operations should go here, for now at least

        //create (Kind of done by Fill List, for now



        //Read
        public DataLayout GetData(int n)
        {
            Console.WriteLine("Getting Virus {0}", n.ToString());
            return Virus_List[n];
           
        }

        public List<DataLayout> WholeList()
        {
            Console.WriteLine("Getting all Viruses");
            return Virus_List;
        }

        //Update


        //delete


    }
}