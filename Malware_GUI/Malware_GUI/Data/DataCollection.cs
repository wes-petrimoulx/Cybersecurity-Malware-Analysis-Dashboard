

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Windows.Media.Imaging;

namespace Malware_GUI.Data
{
    class DataCollection
    {
        private static readonly List<DataLayout> Virus_List = new List<DataLayout>();

        //function that gets the hash from the search bar and adds it to the text file
        //it can then be picked up by the python script to be returned.
        //public string GetHashNum(){
        //    //add input functionality and add a search bar to GUI
        //    string hash = "Input from search bar";
        //    System.IO.File.WriteAllText(Cybersecurity-Malware-Analysis-Dashboard\Malware_GUI\Malware_GUI\Data\string.txt, hash);
        //}

        public void FillList()
        {
            //Data needs to be formated correctly here, then just called in the MainWindow.cs class
            //we can't "add" data in that class (no concatination), hence the adding of things to the front of strings

            //random data for display sakes
            for (int i = 0; i < 7; i++)
            {
                DataLayout temp = new DataLayout();
       
                temp.Name = (i+2).ToString();
                temp.Des = "Description: " + (i * 102);
                temp.NumAcc = (i + 5) * 234;
                temp.Accurance = "Number of accurances: " + temp.NumAcc;
                temp.solutionToProblem = "Solution: Windows update #" + (i + 4) * 1123450;
                temp.IMG = this.bitMap(temp.NumAcc);
                Virus_List.Add(temp);
                Console.WriteLine("Virus {0} created", i.ToString());
            }
        }
        public int SizeOfList()
        {
            return Virus_List.Count();
        }
        //work around for getting different images depending on the virus type
        public BitmapImage bitMap(int n)
        {
            var image = "Assets/malware_Icon.png";
            if (n < 1200)
            {
                image = "Assets/worm_Icon.png";
            }
            else if (n < 1500)
            {
                image = "Assets/trojan_Icon.png";
            }
            else if (n < 2000)
            {
                image = "Assets/spyware_Icon.png";
            }
            else
            {
                image = "Assets/adware_Icon.png";
            }




            return new BitmapImage(new Uri($"pack://application:,,,/{image}"));
        }

        //CRUD operations should go here, for now at least

        //create (Kind of done by Fill List, for now



        //Read
        public DataLayout GetData(int n)
        {
            Console.WriteLine("Getting Virus {0}", n.ToString());
            return Virus_List[n];
           
        }

        public List<DataLayout> WholeList()
        {
            Console.WriteLine("Getting all Viruses");
            return Virus_List;
        }

        //Update


        //delete


    }
}