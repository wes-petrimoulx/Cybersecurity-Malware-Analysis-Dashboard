using Malware_GUI.Data;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;

namespace Malware_GUI.Data
{                           //in here some we could call the http requests to get the data, or we could do one http request, then 
                            //parce it out into the pieces we need
    class DataLayout
    {
        #region OldDataStorage
        //i will probably delete this, but I don't want to just yet

        public string Name { get; set; }    //for this, say "virus = findSubString(<name>)"
        public string Des { get; set; } //for this "Virus_Dec = findSubstring(<description>)" and so on, 
        public string Accurance { get; set; }
        public int NumAcc { get; set; }
        public string solutionToProblem { get; set; }

        #endregion

        //this holds the list of scans, and their properties
        public List<Scan> Scans {get;}
        //this holds the name of the other attributes, and their value
        public List<Attributes> attributes {get;}
        //xaml needs a bitmap to get the image, this holds that bit map
        public BitmapImage IMG { get; set;}

        
    }


    class Scan
    {
        //when we find the word "scan" we should look for the keywords, and create a new scan object until we see a "}},"
        //scan's follow this format "<Name>": {"detected": <detected>, "version": "<version>", "result": "<result>", "update": "<update>"}, 
        //the <> indicate where the value is that needs to be placed into the object.  The pattern matching method should not have the quote characters.  
        //if a scan does not have data, it should just place "NULL" into the variable.  
        public string Name { get; set; }
        public bool detected { get; set; }
        public string version { get; set; }
        public string result { get; set; }
        public string update { get; set; }

        //we could have a function in here that takes the update string, and parses it out to a 
        //date time object or just reformat it.  It currently will come (YYYYMMDD) no spaces, no dashes
        //if we want we can change it here.  



    }


    class Attributes
    {
        //This is for the list of atrabuttes after the scan block.  
        //this might be harder to parse out, but easier to place.  
        //they all follow a simple format "<Name>": "<Val>",
        //notice the "," at the end for creating a new attribute, the final one won't have that,
        //the whole file ends with a }
        public string Name { get; set; }
        public string Val { get; set; }
    }

}