

using Malware_GUI.Model;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Windows.Media.Imaging;


namespace Malware_GUI.Data
{
    class DataCollection
    {
        
        
        private static readonly List<DataLayout> Virus_List = new List<DataLayout>();
        public List<string> MasterAttributes = new List<string>();
        public List<string> MasterScans = new List<string>();//just the names of virus scans that are done listof strings of the names of scans that are made.
        private int VirusCount=0;

        //DB Database = new DB();

        //function that gets the hash from the search bar and adds it to the text file
        //it can then be picked up by the python script to be returned.
        public int GetHashNum(string value)
        {
            //gets text file from the mainWindow function

            Requesting webRequest = new Requesting();
            string report = webRequest.HashFileReport(value);
            //returns the count of the list, to see if it is bigger then betfore
            DataLayout vNew = parse(report);
            Virus_List.Add(vNew);
            return 2;   //will probably delete this
        }
        //split string into "Scans" and "Attributes", calls functions to handle each seperately
        private DataLayout parse(string report)
        {
            DataLayout rtData = new DataLayout();

            string[] delimiters = { "}}, ", "{\"scans\": {"};
            string[] words = report.Split(delimiters, System.StringSplitOptions.RemoveEmptyEntries);
            rtData.Scans = ScanParse(words[0]);
            rtData.attributes = AttParse(words[1]);
          
            if (VirusCount > 0)
            {
                VirusCount++;
            }

            rtData.Name = VirusCount.ToString();

            return rtData;
        }

        private List<Scan> ScanParse(string scans )
        {
            //string pathScans = @"C:\Users\geive\source\repos\Cybersecurity-Malware-Analysis-Dashboard\Malware_GUI\Malware_GUI\Data\Scans.txt";
            string pathScans = @"C:\Users\geive\source\repos\Cybersecurity-Malware-Analysis-Dashboard\Malware_GUI\Malware_GUI\Data\Scans.txt";
            List<Scan> rtScans = new List<Scan>();
            string[] delimiters = { "\"", ": {\"detected\": ", ", \"version\": ", ", \"result\": ", ", \"update\": ", "}, \"" };
            string[] words = scans.Split(delimiters, System.StringSplitOptions.RemoveEmptyEntries);
            Console.WriteLine(words[3]);
            string total = "";
            for(int i=0; i< words.Length-5; i += 5)
            {
                Scan temp = new Scan();
                temp.Name = words[i];
                temp.detected = words[i + 1];
                temp.version = words[i + 2];
                temp.result = words[i + 3];
                temp.update = words[i + 4];
                rtScans.Add(temp);
            }

            //adding any value that's not in the master list for filtering
            foreach (var item in rtScans)
            {   //check box names can't have some characters
                string t = "";
                char[] delim = { '-' };
                string[] tmp = item.Name.Split(delim, System.StringSplitOptions.RemoveEmptyEntries);
                if (tmp.Length > 1)
                {
                    t = tmp[0] + '_' + tmp[1];
                }
                else
                {
                    t = item.Name;
                }

                if (!(MasterScans.Contains(t)))
                {
                    MasterScans.Add(t);
                    total = total + " " + t;
                }
            }
            using (StreamWriter sw = File.CreateText(pathScans))
            {
                sw.WriteLine(total);
            }

            return rtScans;
        }

        public override string ToString()
        {
            return base.ToString();
        }

        // This method creates a file, the file will be overwritten if it already exists
        // path variable is an example, needs to be updated
        
        
        public static void writeToFile()
        {
        //Grant Directory C:\Users\geive\source\repos\Cybersecurity-Malware-Analysis-Dashboard\Malware_GUI\Malware_GUI\Data\outTest.txt
        string pathAttributes = @"C:\Users\geive\source\repos\Cybersecurity-Malware-Analysis-Dashboard\Malware_GUI\Malware_GUI\Data\outTest.txt";
            

            //var systemPath = System.Environment.
            //                 GetFolderPath(
            //                     Environment.SpecialFolder.CommonApplicationData
            //                  );
            //var complete = Path.Combine(systemPath , "files");
            //string path = @complete;
           
            if (!File.Exists(pathAttributes))
            {
                // Create a file to write to.
                using (StreamWriter sw = File.CreateText(pathAttributes))
                {
                    // Test output
                    sw.WriteLine("Test");
                    Console.WriteLine("this got to write");
                    sw.WriteLine("Hello");
                    sw.WriteLine("WE DID IT!!!!!!!!!!!!!!!!!!!!!!!!!!!");
                    sw.WriteLine("this is the second time");
                    sw.WriteLine("this is the f time");
                }
                //System.IO.File.WriteAllLines(@)
            }
            using (StreamWriter sw = File.CreateText(pathAttributes))
            {
                sw.WriteLine("I added this");
            }
        }

        // Method reads from text file (as one whole string)
        public static void readFile()
        {
            string path = @"C:\Users\geive\source\repos\Cybersecurity-Malware-Analysis-Dashboard\Malware_GUI\Malware_GUI\Data\outTest.txt";
            try
            {
                // Open the text file using a stream reader.
                using (var sr = new StreamReader(path))
                {
                    // Read the stream as a string, and write the string to the console.
                    Console.WriteLine(sr.ReadToEnd());
                    Console.WriteLine("this got to read");
                }
            }
            catch (IOException e)
            {
                Console.WriteLine("The file could not be read:");
                Console.WriteLine(e.Message);
            }
        }


        private List<Attributes> AttParse(string att)
        {
            List<Attributes> rtAtt = new List<Attributes>();
            //Grant string pathAttributes = @"C:\Users\geive\source\repos\Cybersecurity-Malware-Analysis-Dashboard\Malware_GUI\Malware_GUI\Data\attributes.txt";
            string pathAttributes = @"C:\Users\geive\source\repos\Cybersecurity-Malware-Analysis-Dashboard\Malware_GUI\Malware_GUI\Data\attributes.txt";
            string[] delimiters = { "\"", ": \"", ", \"" , ": ", "}" };
            string[] words = att.Split(delimiters, System.StringSplitOptions.RemoveEmptyEntries);
            Console.WriteLine(words[3]);
            string total = "";
            for (int i = 0; i < words.Length - 1; i += 2)
            {
                Attributes temp = new Attributes();
                temp.Name = words[i];
                temp.Val = words[i + 1];
                rtAtt.Add(temp);
            }
            //adding to master list for filtering
            foreach (var item in rtAtt)
            {
                if (!(MasterAttributes.Contains(item.Name)))
                {
                    MasterAttributes.Add(item.Name);
                    total = total +  " " + item.Name;
                }
            }
            using (StreamWriter sw = File.CreateText(pathAttributes))
            {
                sw.WriteLine(total);
            }

            return rtAtt;
        }




     //pull from the database onto the list.
        public void FillList()
        {
            try
            {
                string pathAttributes = @"C:\Users\geive\source\repos\Cybersecurity-Malware-Analysis-Dashboard\Malware_GUI\Malware_GUI\Data\attributes.txt";
                string pathScans = @"C:\Users\geive\source\repos\Cybersecurity-Malware-Analysis-Dashboard\Malware_GUI\Malware_GUI\Data\Scans.txt";
                using (var sr = new StreamReader(pathAttributes))
                {
                        //string attT = sr.ReadToEnd();
                        //check box names can't have some characters
                        //string t = "";
                        //char[] delim = { ' ' };
                        //string[] tmp = attT.Name.Split(delim, System.StringSplitOptions.RemoveEmptyEntries);
                        //if (tmp.Length > 1)
                        //    {
                        //        t = tmp[0] + '_' + tmp[1];
                        //    }
                        //else
                        //{
                            //t = item.Name;
                        //}

                        //if (!(MasterAttributes.Contains(t)))
                        //{
                        //    MasterScans.Add(t);
                            //total = total + " " + t;
                        //}
                    






                    





                }

            }
            catch (IOException e)
            {
                Console.WriteLine("The file could not be read:");
                Console.WriteLine(e.Message);
            }


 
            readFile();

        }








        public int SizeOfList()
        {
            return Virus_List.Count();
        }

        //THIS will need some kind of complex parsing, and evaluation, possibly looking through scans for keywords,
            //like "Malware", "worm", "Trojan"....and from the count of those, determining the icon type.  
            //work around for getting different images depending on the virus type
        public BitmapImage bitMap(int n)
        {
            var image = "Assets/malware_Icon.png";
            if (n < 1200)
            {
                image = "Assets/worm_Icon.png";
            }
            else if (n < 1500)
            {
                image = "Assets/trojan_Icon.png";
            }
            else if (n < 2000)
            {
                image = "Assets/spyware_Icon.png";
            }
            else if (n < 3000)
            {
                image = "Assets/adware_Icon.png";
            }
            else image = "Assets/trojan_Icon.png";

            return new BitmapImage(new Uri($"pack://application:,,,/{image}"));
        }

        //CRUD operations should go here, for now at least

        //create (Kind of done by Fill List, for now



        //Read
        public DataLayout GetData(int n)
        {
            Console.WriteLine("Getting Virus {0}", n.ToString());
            return Virus_List[n];
           
        }

        public List<DataLayout> WholeList()
        {
            Console.WriteLine("Getting all Viruses");
            return Virus_List;
        }

        //Update
        public void UpdateLists(DataLayout d)
        {
           
            foreach (var item in d.Scans)
            {
                if (!(MasterScans.Contains(item.Name))){
                    MasterScans.Add(item.Name);
                }
            }

            foreach (var item in d.attributes)
            {
                if (!(MasterAttributes.Contains( item.Name ))){
                    MasterAttributes.Add(item.Name);
                }
            }
        }

        //delete


    }
}