using Malware_GUI.Data;
using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Imaging;


namespace Malware_GUI
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        #region New Way with external classes

        DataCollection VirusList = new DataCollection();

        public MainWindow()
        {

            Uri iconUri = new Uri("pack://application:,,,/Assets/malware_icon.png", UriKind.RelativeOrAbsolute);
            this.Icon = BitmapFrame.Create(iconUri);

            InitializeComponent();


            VirusList.FillList();
            VirusBoard.ItemsSource = VirusList.WholeList();
            this.SizeToContent = SizeToContent.WidthAndHeight;
            Console.WriteLine("data loaded");

        }

        //when the application first opens REDO FOR MAIN BUILD!!!!
        //loading values right away may not be the correct way of doing things for final build
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {

        }
        //SearchButton event handler, 
        void SearchFunction(object sender, RoutedEventArgs e)
        {
            int bCount = VirusList.SizeOfList();

            Console.WriteLine("got value" + searchBar.Text);
            StatusBar.Content = "searching for " + searchBar.Text;
            //From here we can look at searchBar.Text and grab that and send it to whatever function we want
            int i = VirusList.GetHashNum(searchBar.Text); 

            //if there's a new element in the list, add it to the GUI
            if(bCount<= VirusList.SizeOfList()){
                //this is for drawing a new element, I think 
                VirusBoard.ItemsSource = null;
                VirusBoard.ItemsSource = VirusList.WholeList();
                this.SizeToContent = SizeToContent.WidthAndHeight;
            }
        }



        
        #endregion

        private void Scans_Expanded(object sender, RoutedEventArgs e)
        {
            int i = 10;
            for(i=10; i<10000; i+=142)
            {
                CheckBox temp = new CheckBox();
                temp.Content = i.ToString();
                temp.Name = "cd_" + i.ToString();

                ScanList.Children.Add(temp);
            }
           
        }

        private void Values_Expanded(object sender, RoutedEventArgs e)
        {
            int i = 2;
            for (i = 2; i < 100; i += 2)
            {
                CheckBox temp = new CheckBox();
                temp.Content = i.ToString();
                temp.Name = "cd_" + i.ToString();

                ValuesList.Children.Add(temp);
            }

        }
    }

    
}