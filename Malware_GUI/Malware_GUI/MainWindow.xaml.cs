using Malware_GUI.Data;
using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Imaging;


namespace Malware_GUI
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        #region New Way with external classes

        DataCollection VirusList = new DataCollection();

        List<string> FilterScans = new List<string>();
        List<string> FilterValues = new List<string>();

        String FVirus = "initial";

        public MainWindow()
        {

            Uri iconUri = new Uri("pack://application:,,,/Assets/malware_icon.png", UriKind.RelativeOrAbsolute);
            this.Icon = BitmapFrame.Create(iconUri);

            InitializeComponent();

            this.SizeToContent = SizeToContent.WidthAndHeight;
            Console.WriteLine("data loaded");

        }


        //when the application first opens REDO FOR MAIN BUILD!!!!
        //loading values right away may not be the correct way of doing things for final build
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {

        }
        #endregion

        #region VirusBoard Functions

        void V1_Expanded(object sender, RoutedEventArgs e)
        {
            // CheckBox checkedBox = e.Source as CheckBox;
            Expander source = e.Source as Expander;
            string vName = source.Header.ToString();
            //need to bind these values to the content of the expander.
            string s_Scans = ScanString(vName);
            string s_Atts = ValString(vName);

            StackPanel S = new StackPanel();

            TextBlock Scans = new TextBlock();
            TextBlock atts = new TextBlock();

            Scans.Text = s_Scans;
            atts.Text = s_Atts;

            S.Children.Add(Scans);
            S.Children.Add(atts);

            source.Content = S;


        }

        void FilterFunction(object sender, RoutedEventArgs e)
        {
            if (FVirus.Equals("initial")){
                StackPanel S=new StackPanel();
                TextBlock Scans = new TextBlock();
                Scans.Text = "Still need to search for an initial Virus before filtering";
                S.Children.Add(Scans);
                FocusVirus.Children.Add(S);
            }
            else
            {
                string s_Scans = ScanString(FVirus);
                string s_Atts = ValString(FVirus);

                StackPanel S = new StackPanel();

                TextBlock Scans = new TextBlock();
                TextBlock atts = new TextBlock();

                Scans.Text = s_Scans;
                atts.Text = s_Atts;

                S.Children.Add(Scans);
                S.Children.Add(atts);
                FocusVirus.Children.Clear();
                FocusVirus.Children.Add(S);
            }
        }
        public string ScanString(string vName)
        {
            DataLayout v = VirusList.GetData( int.Parse(vName) );
            string str = "";
            if (FilterScans.Count == 0) //no filter, just get all scans? (could limit it from the start)
            {
                foreach (var item in v.Scans)   //for each scan of the virus
                {
                    str+= "Name: " + item.Name + " Detected: " + item.detected + " Version: " + item.version + " Result: " + item.result + " Update: " + item.update + System.Environment.NewLine;
                }
            }
            else
            {      //otherwise build string based on the filter results
                foreach (var item in v.Scans)
                {
                    if (FilterScans.Contains(item.Name))
                    {
                        str += "Name: " + item.Name + " Detected: " + item.detected + " Version: " + item.version + " Result: " + item.result + " Update: " + item.update + System.Environment.NewLine;
                    }
                }
            }
            return str;
        }

        public string ValString(string vName)
        {
            DataLayout v = VirusList.GetData(int.Parse(vName));
            string str = "";
            if (FilterScans.Count == 0) //no filter, just get all scans? (could limit it from the start)
            {
                foreach (var item in v.attributes)   //for each scan of the virus
                {
                    str += "Attribute: " + item.Name  + ", " + item.Val + System.Environment.NewLine;
                }
            }
            else
            {      //otherwise build string based on the filter results
                foreach (var item in v.attributes)
                {
                    if (FilterValues.Contains(item.Name))
                    {
                        str += "Attribute: " + item.Name + ", " + item.Val + System.Environment.NewLine;
                    }
                }
            }
            return str;
        }


        #endregion

        #region SearchBar Functions

        //SearchButton event handler, 
        void SearchFunction(object sender, RoutedEventArgs e)
        {
            int bCount = VirusList.SizeOfList();

            Console.WriteLine("got value" + searchBar.Text);
            StatusBar.Content = "searching for " + searchBar.Text;
            //From here we can look at searchBar.Text and grab that and send it to whatever function we want
            int i = VirusList.GetHashNum(searchBar.Text); 

            //if there's a new element in the list, add it to the GUI
            if(bCount<= VirusList.SizeOfList()){
                //this is for drawing a new element, I think 
                FVirus = i.ToString();
                this.SizeToContent = SizeToContent.WidthAndHeight;
            }
        }

        private void Scans_Expanded(object sender, RoutedEventArgs e)
        {
            int i = 10;
            if(VirusList.MasterScans != null)
            {
                foreach (var item in VirusList.MasterScans)
                {
                    CheckBox temp = new CheckBox();
                    temp.Click += new RoutedEventHandler(CheckBox_Click);
                    temp.Content = item;
                    temp.Name = "cbS_" + item;

                    ScanList.Children.Add(temp);
                }
            }
            else
                {
                CheckBox temp = new CheckBox();
                temp.Click += new RoutedEventHandler(CheckBox_Click);
                temp.Content = i.ToString();
                temp.Name = "cbS_" + i.ToString();

                ScanList.Children.Add(temp);
            }
           
        }

        private void Values_Expanded(object sender, RoutedEventArgs e)
        {
            int i = 2;

            if (VirusList.MasterAttributes != null)
            {
                foreach (var item in VirusList.MasterAttributes)
                {
                    CheckBox temp = new CheckBox();
                    temp.Click += new RoutedEventHandler(CheckBox_Click);
                    temp.Content = item;
                    temp.Name = "cbV_" + item;

                    ValuesList.Children.Add(temp);
                }
            }
            else
            { 
                CheckBox temp = new CheckBox();
                temp.Click += new RoutedEventHandler(CheckBox_Click);
                temp.Content = i.ToString();
                temp.Name = "cbV_" + i.ToString();

                ValuesList.Children.Add(temp);
            }

        }

        private void CheckBox_Click(object sender, RoutedEventArgs e)
        {
            CheckBox checkedBox = e.Source as CheckBox;
            if (checkedBox != null)
            {
                if ((bool)checkedBox.IsChecked)
                {
                    //add item to sort list
                    StatusBar.Content = "CheckBox Checked " + checkedBox.Name;
                    if (checkedBox.Name.StartsWith("cbS_"))
                    {
                        FilterScans.Add(checkedBox.Content.ToString());
                    }
                    else if (checkedBox.Name.StartsWith("cbV_"))
                    {
                        FilterValues.Add(checkedBox.Content.ToString());
                    }
                }
                else
                {
                    //take item off sorted list
                    StatusBar.Content = "CheckBox UN-Checked " + checkedBox.Name;
                    if (checkedBox.Name.StartsWith("cbS_"))
                    {
                        FilterScans.Remove(checkedBox.Content.ToString());
                    }
                    else if (checkedBox.Name.StartsWith("cbV_"))
                    {
                        FilterValues.Remove(checkedBox.Content.ToString());
                    }
                }
            }
            //redraw list after?  or wait and redraw entries all at once when user hits 'redraw' button?  
        }

        #endregion
    }


}