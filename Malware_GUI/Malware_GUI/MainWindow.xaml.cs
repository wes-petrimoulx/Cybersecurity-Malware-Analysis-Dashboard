using Malware_GUI.Data;
using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Imaging;


namespace Malware_GUI
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        #region New Way with external classes

        DataCollection VirusList = new DataCollection();

        public MainWindow()
        {

            Uri iconUri = new Uri("pack://application:,,,/Assets/malware_icon.png", UriKind.RelativeOrAbsolute);
            this.Icon = BitmapFrame.Create(iconUri);

            InitializeComponent();


            VirusList.FillList();
            VirusBoard.ItemsSource = VirusList.WholeList();
            this.SizeToContent = SizeToContent.WidthAndHeight;
            Console.WriteLine("data loaded");

        }

        //when the application first opens REDO FOR MAIN BUILD!!!!
        //loading values right away may not be the correct way of doing things for final build
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {

        }
        //SearchButton event handler, 
        void SearchFunction(object sender, RoutedEventArgs e)
        {
            int bCount = VirusList.SizeOfList();

            Console.WriteLine("got value" + searchBar.Text);
            SearchResults.Text = "searching for " + searchBar.Text;
            //From here we can look at searchBar.Text and grab that and send it to whatever function we want
            int i = VirusList.GetHashNum(searchBar.Text); 

            //if there's a new element in the list, add it to the GUI
            if(bCount<= VirusList.SizeOfList()){
                //this is for drawing a new element, I think 
                VirusBoard.ItemsSource = null;
                VirusBoard.ItemsSource = VirusList.WholeList();
                this.SizeToContent = SizeToContent.WidthAndHeight;
            }
        }
        void UserWindow(object sender, RoutedEventArgs e)
        {
            UserWindow uw = new UserWindow();
            uw.Show();
            this.Close();
        }


        private void cbAllFeatures_CheckedChanged(object sender, RoutedEventArgs e)
        {
            bool newVal = (cbAllOptions.IsChecked == true);
            cb_ScanID.IsChecked = newVal;
            cb_Sca1.IsChecked = newVal;
            cb_Resource.IsChecked = newVal;
            cb_Responce.IsChecked = newVal;
            cb_Date.IsChecked = newVal;
            cb_Link.IsChecked = newVal;
            cb_Verbose.IsChecked = newVal;
            cb_Total.IsChecked = newVal;
            cb_Positive.IsChecked = newVal;
            cb_Sha256.IsChecked = newVal;
            cb_Mb5.IsChecked = newVal;
        }

        private void cbFeature_CheckedChanged(object sender, RoutedEventArgs e)
        {
            cbAllOptions.IsChecked = null;
            if ((cb_ScanID.IsChecked == true) && (cb_Sca1.IsChecked == true) && (cb_Resource.IsChecked == true) &&
                (cb_Responce.IsChecked == true) && (cb_Date.IsChecked == true) && (cb_Link.IsChecked == true) &&
                (cb_Verbose.IsChecked == true) && (cb_Total.IsChecked == true) && (cb_Positive.IsChecked == true) &&
                (cb_Sha256.IsChecked == true) && (cb_Mb5.IsChecked == true))
                cbAllOptions.IsChecked = true;

            if ((cb_ScanID.IsChecked == false) && (cb_Sca1.IsChecked == false) && (cb_Resource.IsChecked == false) &&
                (cb_Responce.IsChecked == false) && (cb_Date.IsChecked == false) && (cb_Link.IsChecked == false) &&
                (cb_Verbose.IsChecked == false) && (cb_Total.IsChecked == false) && (cb_Positive.IsChecked == false) &&
                (cb_Sha256.IsChecked == false) && (cb_Mb5.IsChecked == false))
                cbAllOptions.IsChecked = false;
        }

        #endregion
    }

    
}